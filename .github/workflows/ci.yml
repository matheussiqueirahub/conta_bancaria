name: CI

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

permissions:
  contents: read

jobs:
  test:
    name: Python ${{ matrix.python-version }} on ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    permissions:
      contents: write
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest]
        python-version: ["3.10", "3.11"]

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Setup Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ matrix.python-version }}
          cache: 'pip'

      - name: Show Python version
        run: python -V

      - name: Install tools (ruff, pytest, coverage)
        run: python -m pip install --upgrade pip ruff pytest coverage

      - name: Lint (ruff)
        run: ruff check . --output-format=github

      - name: Validate script output
        shell: bash
        env:
          PYTHONUTF8: '1'
        run: |
          python - << 'PY'
          import subprocess, sys, os
          from pathlib import Path
          env = os.environ.copy()
          env['PYTHONUTF8'] = '1'
          candidates = list(Path('.').glob('Program*Orientada-a-Objetos.py'))
          assert candidates, 'Arquivo de POO nao encontrado (pattern Program*Orientada-a-Objetos.py)'
          script = str(candidates[0])
          res = subprocess.run([sys.executable, '-X', 'utf8', script], capture_output=True, text=True, env=env, check=True)
          out = [line.strip() for line in res.stdout.splitlines() if line.strip()]
          expected = [
              'Veículo está em movimento.',
              'Carro está dirigindo.',
              'Moto está acelerando.',
              'Saldo atual de Ana: R$ 120.00',
          ]
          assert out == expected, f'\nSaída inesperada.\nEsperado: {expected}\nObtido:   {out}\nSTDOUT completo:\n{res.stdout}'
          print('Saída conferida com sucesso.')
          PY

      - name: Run tests with coverage
        shell: bash
        env:
          PYTHONUTF8: '1'
        run: |
          python -X utf8 -m coverage run -m pytest -q
          python -X utf8 -m coverage xml -o coverage.xml
          python -X utf8 -m coverage report -m || true

      - name: Generate coverage badge
        uses: tj-actions/coverage-badge@v2
        with:
          filename: coverage.svg
          coverage-summary: coverage.xml

      - name: Commit coverage badge
        if: github.event_name == 'push' && github.ref == 'refs/heads/main'
        uses: EndBug/add-and-commit@v9
        with:
          add: 'coverage.svg'
          message: 'chore(ci): atualiza badge de cobertura'
          default_author: github_actions

